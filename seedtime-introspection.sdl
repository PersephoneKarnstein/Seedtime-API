"""
Requires that exactly one field must be supplied and that field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""Autogenerated input type of BulkDelete"""
input BulkDeleteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gardenPlanId: ID!
  groupIds: [ID!]!
  landmarkIds: [ID!]!
  plantingFormationIds: [ID!]!
  plantingLocationIds: [ID!]!
}

"""Autogenerated return type of BulkDelete."""
type BulkDeletePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gardenPlan: GardenPlan!
  groups: [Group!]!
  landmarks: [Landmark!]!
  plantingFormations: [PlantingFormation!]!
  plantingLocations: [PlantingLocation!]!
}

"""Autogenerated input type of BulkDuplicate"""
input BulkDuplicateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gardenPlanId: ID!
  groupIds: [ID!]
  landmarkIds: [ID!]
  plantingLocationIds: [ID!]
  shiftBy: VectorInput!
}

"""Autogenerated return type of BulkDuplicate."""
type BulkDuplicatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gardenPlan: GardenPlan!
  groups: [Group!]!
  landmarks: [Landmark!]!
  plantingLocations: [PlantingLocation!]!
}

"""Autogenerated input type of BulkUpdate"""
input BulkUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gardenPlanId: ID!
  landmarkInputs: [BulkUpdateLandmarkInput!]!
  plantingFormationInputs: [BulkUpdatePlantingFormationInput!]!
  plantingLocationInputs: [BulkUpdatePlantingLocationInput!]!
}

input BulkUpdateLandmarkInput {
  id: ID!
  input: UpdateLandmarkInput!
}

"""Autogenerated return type of BulkUpdate."""
type BulkUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gardenPlan: GardenPlan!
  landmarks: [Landmark!]!
  plantingFormations: [PlantingFormation!]!
  plantingLocations: [PlantingLocation!]!
}

input BulkUpdatePlantingFormationInput {
  id: ID!
  input: UpdatePlantingFormationInput!
}

input BulkUpdatePlantingLocationInput {
  id: ID!
  input: UpdatePlantingLocationInput!
}

type Coordinate {
  x: Float!
  y: Float!
}

input CoordinateInput {
  x: Float!
  y: Float!
}

input CreateLandmarkInput {
  fillColor: String!
  iconName: LandmarkIconName
  name: String!
  shape: ShapeInput!
  strokeColor: String!
  strokeWidth: Int!
}

input CreatePlantingFormationInput {
  clusters: [PlantClusterInput!]!
  draft: Boolean
  gardenCropId: ID!
  pattern: PlantingPattern!
  plantingLocationId: ID!
  plantSpacing: Int!
  rowSpacing: Int!
  shape: ShapeInput!
}

input CreatePlantingLocationInput {
  fillColor: String!
  name: String!
  plantingFormationsAttributes: [PlantingFormationAttributesInput!]
  shape: ShapeInput!
}

type CropDefinition implements Node {
  """ID of the object."""
  id: ID!
  plantingPattern: PlantingPattern!
  plantSpacingInches: Float!
  rowSpacingInches: Float
}

type CropSchedule implements Node {
  disabled: Boolean!
  gardenCrops(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    endDate: ISO8601Date!

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
    startDate: ISO8601Date!
  ): GardenCropConnection!

  """ID of the object."""
  id: ID!
  name: String!
}

"""The connection type for CropSchedule."""
type CropScheduleConnection {
  """A list of edges."""
  edges: [CropScheduleEdge!]!

  """A list of nodes."""
  nodes: [CropSchedule!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Autogenerated input type of CropScheduleDelete"""
input CropScheduleDeleteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of CropScheduleDelete."""
type CropScheduleDeletePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  cropSchedule: CropSchedule!
}

"""An edge in a connection."""
type CropScheduleEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: CropSchedule!
}

type Garden implements Node {
  cropSchedules(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): CropScheduleConnection!
  firstFrostMonthday: MonthDay
  firstHardFrostMonthday: MonthDay
  gardenPlan: GardenPlan

  """ID of the object."""
  id: ID!
  lastFrostMonthday: MonthDay
  lastHardFrostMonthday: MonthDay
  lockTasks: Boolean!
  title: String!
  winterGardeningEnabled: Boolean
}

"""The connection type for Garden."""
type GardenConnection {
  """A list of edges."""
  edges: [GardenEdge!]!

  """A list of nodes."""
  nodes: [Garden!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

type GardenCrop implements Node {
  color: String
  cropDefinition: CropDefinition!
  cropSchedule: CropSchedule!
  garden: Garden!
  gardenId: Int!
  groundOccupationEnd: ISO8601Date
  groundOccupationStart: ISO8601Date
  harvestingDate: String!

  """ID of the object."""
  id: ID!
  planting: Planting!
  plantingFormations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PlantingFormationConnection!
  plantingLocations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PlantingLocationConnection!
  seedingDate: String!
  tasks(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): TaskConnection!
  title: String!
}

"""The connection type for GardenCrop."""
type GardenCropConnection {
  """A list of edges."""
  edges: [GardenCropEdge!]!

  """A list of nodes."""
  nodes: [GardenCrop!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type GardenCropEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: GardenCrop!
}

"""An edge in a connection."""
type GardenEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Garden!
}

input GardenInput {
  lockTasks: Boolean
}

type GardenPlan implements Node {
  garden: Garden!

  """Collection of groups on the plan"""
  groups(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GroupConnection!
  height: Int

  """ID of the object."""
  id: ID!

  """Collection of landmarks on the plan"""
  landmarks(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): LandmarkConnection!

  """Collection of planting locations on the plan"""
  plantingLocations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PlantingLocationConnection!
  redoStackSize: Int!
  undoStackSize: Int!
  width: Int
}

"""Autogenerated input type of GardenPlanCreate"""
input GardenPlanCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gardenId: ID!
  gardenPlanInput: GardenPlanInput
}

"""Autogenerated return type of GardenPlanCreate."""
type GardenPlanCreatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  garden: Garden!
}

input GardenPlanInput {
  height: Int!
  width: Int!
}

"""Autogenerated input type of GardenPlanUndoRedo"""
input GardenPlanUndoRedoInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gardenPlanId: ID!
  isRedo: Boolean
}

"""Autogenerated return type of GardenPlanUndoRedo."""
type GardenPlanUndoRedoPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gardenPlan: GardenPlan!
}

"""Autogenerated input type of GardenPlanUpdate"""
input GardenPlanUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gardenPlanInput: GardenPlanInput!
  id: ID!
}

"""Autogenerated return type of GardenPlanUpdate."""
type GardenPlanUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gardenPlan: GardenPlan!
}

"""Autogenerated input type of GardenUpdate"""
input GardenUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gardenInput: GardenInput!
  id: ID!
}

"""Autogenerated return type of GardenUpdate."""
type GardenUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  garden: Garden!
}

type Group implements Layered & Node {
  children(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): LayeredConnection!
  gardenPlan: GardenPlan!
  groupId: String
  hidden: Boolean!
  id: ID!
  index: Int
  landmarks(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): LandmarkConnection!
  name: String!
  plantingLocations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PlantingLocationConnection!
}

"""The connection type for Group."""
type GroupConnection {
  """A list of edges."""
  edges: [GroupEdge!]!

  """A list of nodes."""
  nodes: [Group!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Autogenerated input type of GroupCreate"""
input GroupCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gardenPlanId: ID!
  groupInput: GroupInput!
}

"""Autogenerated return type of GroupCreate."""
type GroupCreatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  group: Group!
}

"""Autogenerated input type of GroupDelete"""
input GroupDeleteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of GroupDelete."""
type GroupDeletePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  group: Group!
}

"""Autogenerated input type of GroupDuplicate"""
input GroupDuplicateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  shiftBy: VectorInput!
}

"""Autogenerated return type of GroupDuplicate."""
type GroupDuplicatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  group: Group!
}

"""An edge in a connection."""
type GroupEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Group!
}

input GroupInput {
  landmarkIds: [ID!]
  name: String!
  plantingLocationIds: [ID!]
}

"""Autogenerated input type of GroupUngroup"""
input GroupUngroupInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of GroupUngroup."""
type GroupUngroupPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  group: Group!
  ungroupedItems: [Layered!]!
}

"""Autogenerated input type of GroupUpdate"""
input GroupUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  groupInput: GroupInput!
  id: ID!
}

"""Autogenerated return type of GroupUpdate."""
type GroupUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  group: Group!
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

type Landmark implements Layered & Node {
  fillColor: String!
  gardenPlan: GardenPlan!
  groupId: String
  hidden: Boolean!
  iconName: LandmarkIconName
  id: ID!
  index: Int
  name: String!
  shape: Shape!
  strokeColor: String!
  strokeWidth: Int!
}

"""The connection type for Landmark."""
type LandmarkConnection {
  """A list of edges."""
  edges: [LandmarkEdge!]!

  """A list of nodes."""
  nodes: [Landmark!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Autogenerated input type of LandmarkCreate"""
input LandmarkCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gardenPlanId: ID!
  landmarkInput: CreateLandmarkInput!
}

"""Autogenerated return type of LandmarkCreate."""
type LandmarkCreatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  landmark: Landmark!
}

"""Autogenerated input type of LandmarkDelete"""
input LandmarkDeleteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of LandmarkDelete."""
type LandmarkDeletePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  landmark: Landmark!
}

"""Autogenerated input type of LandmarkDuplicate"""
input LandmarkDuplicateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  shiftBy: VectorInput!
}

"""Autogenerated return type of LandmarkDuplicate."""
type LandmarkDuplicatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  landmark: Landmark!
}

"""An edge in a connection."""
type LandmarkEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Landmark!
}

"""Landmark icon name enum"""
enum LandmarkIconName {
  house
  tree
}

"""Autogenerated input type of LandmarkUpdate"""
input LandmarkUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  landmarkInput: UpdateLandmarkInput!
}

"""Autogenerated return type of LandmarkUpdate."""
type LandmarkUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  landmark: Landmark!
}

interface Layered {
  gardenPlan: GardenPlan!
  groupId: String
  hidden: Boolean!
  id: ID!
  index: Int
}

"""The connection type for Layered."""
type LayeredConnection {
  """A list of edges."""
  edges: [LayeredEdge!]!

  """A list of nodes."""
  nodes: [Layered!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type LayeredEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Layered!
}

input LayerInput {
  groupId: ID
  hidden: Boolean
  indexPosition: Int
}

"""Autogenerated input type of LayerUpdate"""
input LayerUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  layerInput: LayerInput!
}

"""Autogenerated return type of LayerUpdate."""
type LayerUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  layer: Layered!
}

"""Container for a pair of month and day"""
type MonthDay {
  day: Int!
  month: Int!
}

type Mutation {
  """Bulk deletes plan items"""
  bulkDelete(
    """Parameters for BulkDelete"""
    input: BulkDeleteInput!
  ): BulkDeletePayload

  """Bulk duplicates plan items"""
  bulkDuplicate(
    """Parameters for BulkDuplicate"""
    input: BulkDuplicateInput!
  ): BulkDuplicatePayload

  """Bulk updates plan items"""
  bulkUpdate(
    """Parameters for BulkUpdate"""
    input: BulkUpdateInput!
  ): BulkUpdatePayload

  """Deletes a crop schedule"""
  cropScheduleDelete(
    """Parameters for CropScheduleDelete"""
    input: CropScheduleDeleteInput!
  ): CropScheduleDeletePayload

  """Creates a new garden_plan"""
  gardenPlanCreate(
    """Parameters for GardenPlanCreate"""
    input: GardenPlanCreateInput!
  ): GardenPlanCreatePayload
  gardenPlanUndoRedo(
    """Parameters for GardenPlanUndoRedo"""
    input: GardenPlanUndoRedoInput!
  ): GardenPlanUndoRedoPayload

  """Updates a garden_plan by id"""
  gardenPlanUpdate(
    """Parameters for GardenPlanUpdate"""
    input: GardenPlanUpdateInput!
  ): GardenPlanUpdatePayload

  """Updates a garden by id"""
  gardenUpdate(
    """Parameters for GardenUpdate"""
    input: GardenUpdateInput!
  ): GardenUpdatePayload

  """Creates a new layer group"""
  groupCreate(
    """Parameters for GroupCreate"""
    input: GroupCreateInput!
  ): GroupCreatePayload

  """Deletes a group by ID"""
  groupDelete(
    """Parameters for GroupDelete"""
    input: GroupDeleteInput!
  ): GroupDeletePayload

  """Duplicates a group"""
  groupDuplicate(
    """Parameters for GroupDuplicate"""
    input: GroupDuplicateInput!
  ): GroupDuplicatePayload

  """Moves items out of a group and deletes it"""
  groupUngroup(
    """Parameters for GroupUngroup"""
    input: GroupUngroupInput!
  ): GroupUngroupPayload

  """Updates a group by id"""
  groupUpdate(
    """Parameters for GroupUpdate"""
    input: GroupUpdateInput!
  ): GroupUpdatePayload

  """Creates a new landmark"""
  landmarkCreate(
    """Parameters for LandmarkCreate"""
    input: LandmarkCreateInput!
  ): LandmarkCreatePayload

  """Deletes a landmark by ID"""
  landmarkDelete(
    """Parameters for LandmarkDelete"""
    input: LandmarkDeleteInput!
  ): LandmarkDeletePayload

  """Duplicates a landmark"""
  landmarkDuplicate(
    """Parameters for LandmarkDuplicate"""
    input: LandmarkDuplicateInput!
  ): LandmarkDuplicatePayload

  """Updates a landmark by id"""
  landmarkUpdate(
    """Parameters for LandmarkUpdate"""
    input: LandmarkUpdateInput!
  ): LandmarkUpdatePayload

  """Updates a layer by item id"""
  layerUpdate(
    """Parameters for LayerUpdate"""
    input: LayerUpdateInput!
  ): LayerUpdatePayload
  plantingAddSuccession(
    """Parameters for PlantingAddSuccession"""
    input: PlantingAddSuccessionInput!
  ): PlantingAddSuccessionPayload
  plantingAddSuccessionWarning(
    """Parameters for PlantingAddSuccessionWarning"""
    input: PlantingAddSuccessionWarningInput!
  ): PlantingAddSuccessionWarningPayload
  plantingDelete(
    """Parameters for PlantingDelete"""
    input: PlantingDeleteInput!
  ): PlantingDeletePayload
  plantingDuplicate(
    """Parameters for PlantingDuplicate"""
    input: PlantingDuplicateInput!
  ): PlantingDuplicatePayload

  """Creates a new planting_formation"""
  plantingFormationCreate(
    """Parameters for PlantingFormationCreate"""
    input: PlantingFormationCreateInput!
  ): PlantingFormationCreatePayload

  """Deletes a planting_formation by ID"""
  plantingFormationDelete(
    """Parameters for PlantingFormationDelete"""
    input: PlantingFormationDeleteInput!
  ): PlantingFormationDeletePayload

  """Updates a planting_formation by id"""
  plantingFormationUpdate(
    """Parameters for PlantingFormationUpdate"""
    input: PlantingFormationUpdateInput!
  ): PlantingFormationUpdatePayload

  """Creates a new planting_location"""
  plantingLocationCreate(
    """Parameters for PlantingLocationCreate"""
    input: PlantingLocationCreateInput!
  ): PlantingLocationCreatePayload

  """Deletes a planting_location by ID"""
  plantingLocationDelete(
    """Parameters for PlantingLocationDelete"""
    input: PlantingLocationDeleteInput!
  ): PlantingLocationDeletePayload

  """Duplicates a planting location"""
  plantingLocationDuplicate(
    """Parameters for PlantingLocationDuplicate"""
    input: PlantingLocationDuplicateInput!
  ): PlantingLocationDuplicatePayload

  """Updates a planting_location by id"""
  plantingLocationUpdate(
    """Parameters for PlantingLocationUpdate"""
    input: PlantingLocationUpdateInput!
  ): PlantingLocationUpdatePayload
  plantingToggleLink(
    """Parameters for PlantingToggleLink"""
    input: PlantingToggleLinkInput!
  ): PlantingToggleLinkPayload
  switchPrimaryGarden(
    """Parameters for SwitchPrimaryGarden"""
    input: SwitchPrimaryGardenInput!
  ): SwitchPrimaryGardenPayload
  taskMoveCreate(
    """Parameters for TaskMoveCreate"""
    input: TaskMoveCreateInput!
  ): TaskMoveCreatePayload

  """Generates warning for a given task move"""
  taskMoveWarning(
    """Parameters for TaskMoveWarning"""
    input: TaskMoveWarningInput!
  ): TaskMoveWarningPayload
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type PlantCluster {
  plantCount: Int!
  rows: [PlantRow!]!
  shape: Shape!
}

input PlantClusterInput {
  plantCount: Int!
  rows: [PlantRowInput!]!
  shape: ShapeInput!
}

type Planting implements Node {
  gardenCrop: GardenCrop!

  """ID of the object."""
  id: ID!
  linked: Boolean!
  visible: Boolean!
}

"""Autogenerated input type of PlantingAddSuccession"""
input PlantingAddSuccessionInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of PlantingAddSuccession."""
type PlantingAddSuccessionPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  planting: Planting!
}

"""Autogenerated input type of PlantingAddSuccessionWarning"""
input PlantingAddSuccessionWarningInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of PlantingAddSuccessionWarning."""
type PlantingAddSuccessionWarningPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  warning: String
}

"""Autogenerated input type of PlantingDelete"""
input PlantingDeleteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of PlantingDelete."""
type PlantingDeletePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  planting: Planting!
}

"""Autogenerated input type of PlantingDuplicate"""
input PlantingDuplicateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of PlantingDuplicate."""
type PlantingDuplicatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  planting: Planting!
}

type PlantingFormation implements Node {
  clusters: [PlantCluster!]!
  draft: Boolean!
  gardenCrop: GardenCrop!
  gardenPlan: GardenPlan!

  """ID of the object."""
  id: ID!
  pattern: PlantingPattern!
  plantingLocation: PlantingLocation!
  plantSpacing: Int!
  rowSpacing: Int!
  shape: Shape!
}

input PlantingFormationAttributesInput {
  _destroy: Boolean
  clusters: [PlantClusterInput!]
  id: ID!
  shape: ShapeInput
}

"""The connection type for PlantingFormation."""
type PlantingFormationConnection {
  """A list of edges."""
  edges: [PlantingFormationEdge!]!

  """A list of nodes."""
  nodes: [PlantingFormation!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Autogenerated input type of PlantingFormationCreate"""
input PlantingFormationCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  plantingFormationInput: CreatePlantingFormationInput!
}

"""Autogenerated return type of PlantingFormationCreate."""
type PlantingFormationCreatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  plantingFormation: PlantingFormation!
}

"""Autogenerated input type of PlantingFormationDelete"""
input PlantingFormationDeleteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of PlantingFormationDelete."""
type PlantingFormationDeletePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  plantingFormation: PlantingFormation!
}

"""An edge in a connection."""
type PlantingFormationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PlantingFormation!
}

"""Autogenerated input type of PlantingFormationUpdate"""
input PlantingFormationUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  plantingFormationInput: UpdatePlantingFormationInput!
}

"""Autogenerated return type of PlantingFormationUpdate."""
type PlantingFormationUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  plantingFormation: PlantingFormation!
}

type PlantingLocation implements Layered & Node {
  fillColor: String!
  gardenPlan: GardenPlan!
  group: Group
  groupId: String
  hidden: Boolean!
  id: ID!
  index: Int
  name: String!
  plantingFormations(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): PlantingFormationConnection!
  shape: Shape!
}

"""The connection type for PlantingLocation."""
type PlantingLocationConnection {
  """A list of edges."""
  edges: [PlantingLocationEdge!]!

  """A list of nodes."""
  nodes: [PlantingLocation!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""Autogenerated input type of PlantingLocationCreate"""
input PlantingLocationCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  gardenPlanId: ID!
  plantingLocationInput: CreatePlantingLocationInput!
}

"""Autogenerated return type of PlantingLocationCreate."""
type PlantingLocationCreatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  plantingLocation: PlantingLocation!
}

"""Autogenerated input type of PlantingLocationDelete"""
input PlantingLocationDeleteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of PlantingLocationDelete."""
type PlantingLocationDeletePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  plantingLocation: PlantingLocation!
}

"""Autogenerated input type of PlantingLocationDuplicate"""
input PlantingLocationDuplicateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  shiftBy: VectorInput!
}

"""Autogenerated return type of PlantingLocationDuplicate."""
type PlantingLocationDuplicatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  plantingLocation: PlantingLocation!
}

"""An edge in a connection."""
type PlantingLocationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: PlantingLocation!
}

"""Autogenerated input type of PlantingLocationUpdate"""
input PlantingLocationUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  plantingLocationInput: UpdatePlantingLocationInput!
}

"""Autogenerated return type of PlantingLocationUpdate."""
type PlantingLocationUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  plantingLocation: PlantingLocation!
}

"""Planting pattern enum"""
enum PlantingPattern {
  rectangular
  triangular
}

"""Autogenerated input type of PlantingToggleLink"""
input PlantingToggleLinkInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of PlantingToggleLink."""
type PlantingToggleLinkPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  planting: Planting!
}

type PlantRow {
  end: Coordinate!
  start: Coordinate!
}

input PlantRowInput {
  end: CoordinateInput!
  start: CoordinateInput!
}

type Query {
  """List of user's gardens (calendars)"""
  gardens(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): GardenConnection!

  """Current user's info"""
  me: User!

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Fetches a list of objects given a list of IDs."""
  nodes(
    """IDs of the objects."""
    ids: [ID!]!
  ): [Node]!

  """Currently selected garden"""
  primaryGarden: Garden!
}

type Segment {
  bezierControlPoints: [Coordinate!]
  start: Coordinate!
}

input SegmentInput {
  bezierControlPoints: [CoordinateInput!]
  start: CoordinateInput!
}

type Shape {
  rotation: Float!
  segments: [Segment!]!
}

input ShapeInput {
  rotation: Float!
  segments: [SegmentInput!]!
}

"""Autogenerated input type of SwitchPrimaryGarden"""
input SwitchPrimaryGardenInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of SwitchPrimaryGarden."""
type SwitchPrimaryGardenPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  user: User!
}

type Task implements Node {
  endDateWithShift: ISO8601Date!
  gardenCrop: GardenCrop!
  gardenCropId: ID

  """ID of the object."""
  id: ID!
  startDateWithShift: ISO8601Date!
  status: TaskStatus!
  taskType: TaskType!
}

"""The connection type for Task."""
type TaskConnection {
  """A list of edges."""
  edges: [TaskEdge!]!

  """A list of nodes."""
  nodes: [Task!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type TaskEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: Task!
}

"""Autogenerated input type of TaskMoveCreate"""
input TaskMoveCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  taskId: ID!
  taskMove: TaskMoveInput!
}

"""Autogenerated return type of TaskMoveCreate."""
type TaskMoveCreatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  task: Task!
}

input TaskMoveInput {
  endDelta: Int!
  startDelta: Int!
}

"""Autogenerated input type of TaskMoveWarning"""
input TaskMoveWarningInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  taskId: ID!
  taskMove: TaskMoveInput!
}

"""Autogenerated return type of TaskMoveWarning."""
type TaskMoveWarningPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  warning: String
}

"""Task status enum"""
enum TaskStatus {
  todo
  completed
}

"""Task type enum"""
enum TaskType {
  direct_seeding
  indoor_seeding
  bed_preparation
  transplanting
  harvesting
  stale_seed_bed
  cultivating
  custom
}

input UpdateLandmarkInput {
  fillColor: String
  iconName: LandmarkIconName
  name: String
  shape: ShapeInput
  strokeColor: String
  strokeWidth: Int
}

input UpdatePlantingFormationInput {
  clusters: [PlantClusterInput!]
  draft: Boolean
  gardenCropId: ID
  pattern: PlantingPattern
  plantingLocationId: ID
  plantSpacing: Int
  rowSpacing: Int
  shape: ShapeInput
}

input UpdatePlantingLocationInput {
  fillColor: String
  name: String
  plantingFormationsAttributes: [PlantingFormationAttributesInput!]
  shape: ShapeInput
}

type User implements Node {
  canAddGardens: Boolean!
  email: String!
  firstname: String!

  """ID of the object."""
  id: ID!
  lastname: String!
  primaryGarden: Garden
}

input VectorInput {
  x: Float!
  y: Float!
}
